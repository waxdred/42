!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
ARGV	Makefile	/^ARGV		=	$(filter-out $@,$(MAKECMDGOALS))$/;"	m
CC	Makefile	/^CC 		= 	 gcc$/;"	m
CC	libft/Makefile	/^CC 		= 	gcc$/;"	m
CCEND	Makefile	/^CCEND 		=   	\\033[0m$/;"	m
CCEND	libft/Makefile	/^CCEND 		=   	\\033[0m$/;"	m
CCPURPLE	Makefile	/^CCPURPLE 	=   	\\033[35m$/;"	m
CCPURPLE	libft/Makefile	/^CCPURPLE 	=   	\\033[35m$/;"	m
CCRED	Makefile	/^CCRED 		=   	\\033[31m$/;"	m
CCRED	libft/Makefile	/^CCRED 		=   	\\033[31m$/;"	m
CCYAN	Makefile	/^CCYAN 		=   	\\033[34m$/;"	m
CCYAN	libft/Makefile	/^CCYAN 		=   	\\033[34m$/;"	m
CGREEN	Makefile	/^CGREEN		=   	\\033[33m$/;"	m
CGREEN	libft/Makefile	/^CGREEN		=   	\\033[33m$/;"	m
CONV	libft/Makefile	/^CONV 		=     	ft_atoi.c			\\$/;"	m
CONV_O	libft/Makefile	/^CONV_O		=	$(addprefix $(PATH_CONV), $(CONV))$/;"	m
DEPEND	Makefile	/^DEPEND		= 	libft\/libft.a$/;"	m
EXEC	Makefile	/^EXEC 		= 	 push_swap$/;"	m
EXEC	libft/Makefile	/^EXEC 		= 	libft$/;"	m
FLAGS	Makefile	/^FLAGS 		= 	-Wall -Werror -Wextra -ggdb $/;"	m
FLAGS	libft/Makefile	/^FLAGS 		= 	-Wall -Werror -Wextra$/;"	m
HEADER	Makefile	/^HEADER 		= 	includes\/push_swap.h$/;"	m
HEADER	libft/Makefile	/^HEADER 		= 	include\/libft.h$/;"	m
ISA	libft/Makefile	/^ISA		=	ft_isalnum.c	   		\\$/;"	m
ISA_O	libft/Makefile	/^ISA_O		=	$(addprefix $(PATH_ISA), $(ISA))$/;"	m
LIB	Makefile	/^LIB		= 	-llibft$/;"	m
LIBFT_H	libft/include/libft.h	/^# define LIBFT_H$/;"	d
LST	libft/Makefile	/^LST	=		ft_lstadd_back.c 		\\$/;"	m
LST_O	libft/Makefile	/^LST_O		=	$(addprefix $(PATH_LST), $(LST))$/;"	m
MEM	libft/Makefile	/^MEM		=	ft_bzero.c	   		\\$/;"	m
MEM_O	libft/Makefile	/^MEM_O		=	$(addprefix $(PATH_MEM), $(MEM))$/;"	m
MK	Makefile	/^MK		= 	Makefile$/;"	m
MK	libft/Makefile	/^MK 		= 	Makefile$/;"	m
NAME	Makefile	/^NAME 		= 	 push_swap.a$/;"	m
NAME	libft/Makefile	/^NAME 		=	libft.a$/;"	m
OBJS_CONV	libft/Makefile	/^OBJS_CONV	=	$(CONV:.c=.o)$/;"	m
OBJS_ISA	libft/Makefile	/^OBJS_ISA	=	$(ISA:.c=.o)$/;"	m
OBJS_LST	libft/Makefile	/^OBJS_LST	=	$(LST:.c=.o)$/;"	m
OBJS_MEM	libft/Makefile	/^OBJS_MEM	=	$(MEM:.c=.o)$/;"	m
OBJS_PRINT	libft/Makefile	/^OBJS_PRINT	=	$(PRINT:.c=.o)$/;"	m
OBJS_STR	libft/Makefile	/^OBJS_STR	=	$(STR:.c=.o)$/;"	m
OBJ_C	libft/Makefile	/^OBJ_C		=	$(addprefix $(PATH_OBJ), $(OBJS_CONV))$/;"	m
OBJ_ISA	libft/Makefile	/^OBJ_ISA		=	$(addprefix $(PATH_OBJ), $(OBJS_ISA))$/;"	m
OBJ_LST	libft/Makefile	/^OBJ_LST		=	$(addprefix $(PATH_OBJ), $(OBJS_LST))$/;"	m
OBJ_MEM	libft/Makefile	/^OBJ_MEM		=	$(addprefix $(PATH_OBJ), $(OBJS_MEM))$/;"	m
OBJ_PRINT	libft/Makefile	/^OBJ_PRINT	=	$(addprefix $(PATH_OBJ), $(OBJS_PRINT))$/;"	m
OBJ_S	Makefile	/^OBJ_S		=	$(addprefix $(PATH_OBJ), $(OBJ_SRC))$/;"	m
OBJ_SRC	Makefile	/^OBJ_SRC		=	$(SRC:.c=.o)$/;"	m
OBJ_STR	libft/Makefile	/^OBJ_STR		=	$(addprefix $(PATH_OBJ), $(OBJS_STR))$/;"	m
PATH_CONV	libft/Makefile	/^PATH_CONV	=	.\/conv\/$/;"	m
PATH_ISA	libft/Makefile	/^PATH_ISA	=	.\/isa\/$/;"	m
PATH_LST	libft/Makefile	/^PATH_LST	=	.\/lst\/$/;"	m
PATH_MEM	libft/Makefile	/^PATH_MEM	=	.\/mem\/$/;"	m
PATH_OBJ	Makefile	/^PATH_OBJ	=	.\/objs\/$/;"	m
PATH_OBJ	libft/Makefile	/^PATH_OBJ	=	.\/objs\/$/;"	m
PATH_PRINT	libft/Makefile	/^PATH_PRINT	=	.\/print\/$/;"	m
PATH_SRC	Makefile	/^PATH_SRC	=	.\/srcs\/$/;"	m
PATH_STR	libft/Makefile	/^PATH_STR	=	.\/str\/$/;"	m
PRINT	libft/Makefile	/^PRINT		=	ft_putchar_fd.c  	        \\$/;"	m
PRINT_O	libft/Makefile	/^PRINT_O		=	$(addprefix $(PATH_PRINT), $(PRINT))$/;"	m
PUSH_SWAP_H	includes/push_swap.h	/^# define PUSH_SWAP_H$/;"	d
SAN	Makefile	/^SAN 		= 	-g3 -fsanitize=address$/;"	m
SRC	Makefile	/^SRC 		=   	ft_push.c		\\$/;"	m
SRC_O	Makefile	/^SRC_O		=	$(addprefix $(PATH_SRC), $(SRC))$/;"	m
STR	libft/Makefile	/^STR		=	ft_split.c       		\\$/;"	m
STR_O	libft/Makefile	/^STR_O		=	$(addprefix $(PATH_STR), $(STR))$/;"	m
binary	includes/push_swap.h	/^	int				*binary;$/;"	m	struct:s_pile
binary_len	includes/push_swap.h	/^	int		binary_len;$/;"	m	struct:s_swap
coef	includes/push_swap.h	/^	int		coef;$/;"	m	struct:s_swap
content	libft/include/libft.h	/^	void			*content;$/;"	m	struct:s_list
csum	includes/push_swap.h	/^	int		csum;$/;"	m	struct:s_swap
data	includes/push_swap.h	/^	int				data;$/;"	m	struct:s_pile
ft_add_back	srcs/lst_tools1.c	/^void	ft_add_back(t_pile **alst, t_pile *ne)$/;"	f
ft_add_front	srcs/lst_tools.c	/^void	ft_add_front(t_pile **alst, t_pile *ne)$/;"	f
ft_add_index	srcs/ft_push.c	/^void	ft_add_index(t_pile **stack, t_swap *env)$/;"	f
ft_atoi	libft/conv/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_base	libft/conv/ft_atoi_base.c	/^int	ft_atoi_base(char *str, char *base)$/;"	f
ft_atol	libft/conv/ft_atoll.c	/^long int	ft_atol(const char *str)$/;"	f
ft_binary_len	libft/conv/ft_binary_len.c	/^int	ft_binary_len(int nbr)$/;"	f
ft_bzero	libft/mem/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/mem/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check_base	libft/conv/ft_atoi_base.c	/^int	ft_check_base(int len_base, char *base)$/;"	f
ft_check_doublon	srcs/check_error.c	/^int	ft_check_doublon(t_pile *stack, int data, t_swap *env)$/;"	f
ft_check_end	libft/conv/ft_atoi_base.c	/^int	ft_check_end(char c, char *base)$/;"	f
ft_clear_binary	srcs/lst_tools1.c	/^void	ft_clear_binary(t_swap *env)$/;"	f
ft_clear_stack	srcs/lst_tools.c	/^void	ft_clear_stack(t_pile **stack)$/;"	f
ft_complet	libft/conv/ft_itoa.c	/^static char	*ft_complet(char *str, long long int n, int len)$/;"	f	file:
ft_complet_tmp	srcs/utils2.c	/^void	ft_complet_tmp(t_swap *env, int i, int j)$/;"	f
ft_count_min_max	srcs/utils2.c	/^void	ft_count_min_max(t_swap *env)$/;"	f
ft_count_prefix	srcs/utils.c	/^void	ft_count_prefix(t_swap *env, int coef)$/;"	f
ft_count_word	libft/str/ft_strsplit.c	/^static int	ft_count_word(char *s, char c)$/;"	f	file:
ft_countunit	srcs/utils1.c	/^int	ft_countunit(t_pile **stack, int unit)$/;"	f
ft_creat_tab	srcs/utils.c	/^void	ft_creat_tab(t_pile **stack, t_swap *env)$/;"	f
ft_create_elem	srcs/lst_tools.c	/^t_pile	*ft_create_elem(int data)$/;"	f
ft_dec_to_bin	libft/conv/ft_dec_to_bin.c	/^int	*ft_dec_to_bin(int nbr, int size)$/;"	f
ft_end_index	srcs/utils1.c	/^int	ft_end_index(t_pile **stack)$/;"	f
ft_end_sort	srcs/utils1.c	/^int	ft_end_sort(t_pile **stack, t_swap *env)$/;"	f
ft_error	srcs/check_error.c	/^int	ft_error(char *av, t_swap *env)$/;"	f
ft_freetab	libft/mem/ft_freetab.c	/^void	ft_freetab(char **tab)$/;"	f
ft_gen_tmp	srcs/utils2.c	/^int	ft_gen_tmp(t_swap *env)$/;"	f
ft_get_env	srcs/ft_env.c	/^void	ft_get_env(t_pile **stack, t_swap *env)$/;"	f
ft_get_full_env	srcs/main.c	/^void	ft_get_full_env(t_pile **stack, t_swap *env)$/;"	f
ft_get_nb	libft/conv/ft_atoi_base.c	/^int	ft_get_nb(char c, char *base)$/;"	f
ft_get_prefix	srcs/utils1.c	/^int	ft_get_prefix(int data, int coef)$/;"	f
ft_get_size_value	srcs/ft_env.c	/^int	ft_get_size_value(int max, int min)$/;"	f
ft_isalnum	libft/isa/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/isa/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/isa/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/isa/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/isa/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/conv/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_joint	libft/str/ft_strjoin.c	/^char	*ft_joint(char *dest, char const *s2, unsigned int i, char *tmp)$/;"	f
ft_last	srcs/lst_tools.c	/^t_pile	*ft_last(t_pile *lst)$/;"	f
ft_len_str	libft/conv/ft_itoa.c	/^static int	ft_len_str(long long int n)$/;"	f	file:
ft_len_tab	libft/str/ft_len_tab.c	/^int	ft_len_tab(char **tab)$/;"	f
ft_lstadd_back	libft/lst/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *ne)$/;"	f
ft_lstadd_front	libft/lst/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *ne)$/;"	f
ft_lstclear	libft/lst/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/lst/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/lst/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/lst/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstnew	libft/lst/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/lst/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memalloc	libft/mem/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memchr	libft/mem/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/mem/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/mem/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/mem/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/mem/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_num	srcs/check_error.c	/^int	ft_num(char *av)$/;"	f
ft_push_param	srcs/ft_push.c	/^t_pile	*ft_push_param(int ac, char **av, t_swap *env, int check)$/;"	f
ft_pusha	srcs/stackA.c	/^void	ft_pusha(t_pile **pilea, t_pile **pileb)$/;"	f
ft_pushb	srcs/stackB.c	/^void	ft_pushb(t_pile **pilea, t_pile **pileb)$/;"	f
ft_putchar	libft/print/ft_putchar.c	/^int	ft_putchar(int c)$/;"	f
ft_putchar_fd	libft/print/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/print/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/print/ft_putnbr.c	/^int	ft_putnbr(int n)$/;"	f
ft_putnbr_base	libft/print/ft_putnbr_base.c	/^int	ft_putnbr_base(int nbr, char *base, int res)$/;"	f
ft_putnbr_fd	libft/print/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_unbase	libft/print/ft_putnbr_unbase.c	/^int	ft_putnbr_unbase(unsigned int nbr, char *base, int res)$/;"	f
ft_putnbr_unsigned	libft/print/ft_putnbr_unsigned.c	/^int	ft_putnbr_unsigned(unsigned int n)$/;"	f
ft_putstr	libft/print/ft_putstr.c	/^int	ft_putstr(char *str)$/;"	f
ft_putstr_fd	libft/print/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_radix_sort	srcs/algo.c	/^void	ft_radix_sort(t_swap *env, int i, int count, int index)$/;"	f
ft_rotatepilea	srcs/stackA.c	/^void	ft_rotatepilea(t_pile **pile)$/;"	f
ft_rotatepileb	srcs/stackB.c	/^void	ft_rotatepileb(t_pile **pile)$/;"	f
ft_rotaterevpilea	srcs/stackA.c	/^void	ft_rotaterevpilea(t_pile **pile)$/;"	f
ft_rotaterevpileb	srcs/stackB.c	/^void	ft_rotaterevpileb(t_pile **pile)$/;"	f
ft_saveindex	srcs/utils1.c	/^int	ft_saveindex(t_pile *tmp, int unit)$/;"	f
ft_sort_five	srcs/algo.c	/^void	ft_sort_five(t_swap *env)$/;"	f
ft_sort_int_tab	libft/print/ft_putnbr_base.c	/^static int	ft_sort_int_tab(char *str)$/;"	f	file:
ft_sort_int_tab	libft/print/ft_putnbr_unbase.c	/^static int	ft_sort_int_tab(char *str)$/;"	f	file:
ft_sort_list	srcs/ft_push.c	/^void	ft_sort_list(t_swap *env)$/;"	f
ft_sort_neg	srcs/utils.c	/^void	ft_sort_neg(t_swap *env)$/;"	f
ft_sort_prefix	srcs/utils.c	/^void	ft_sort_prefix(t_swap *env, int coef)$/;"	f
ft_sort_tree	srcs/algo.c	/^void	ft_sort_tree(t_swap *env)$/;"	f
ft_sorted	srcs/algo.c	/^int	ft_sorted(t_swap *env)$/;"	f
ft_sorting	srcs/main.c	/^void	ft_sorting(t_swap *env)$/;"	f
ft_split	libft/str/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_splitstr	libft/str/ft_strsplit.c	/^static int	ft_splitstr(char **tab, char *s, char c, size_t len)$/;"	f	file:
ft_stack_l	srcs/lst_tools1.c	/^int	ft_stack_l(t_pile *stack)$/;"	f
ft_stack_len	srcs/lst_tools.c	/^int	ft_stack_len(t_pile *stack, t_swap *env)$/;"	f
ft_stack_max	srcs/check_error.c	/^int	ft_stack_max(ssize_t data)$/;"	f
ft_start_str	libft/conv/ft_atoi_base.c	/^char	*ft_start_str(char *str, int *sign)$/;"	f
ft_strchr	libft/str/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strcmp	libft/str/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/str/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	libft/mem/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdupcat	libft/mem/ft_strdupcat.c	/^char	*ft_strdupcat(char *dest, const char *src)$/;"	f
ft_strichr	libft/str/ft_strichr.c	/^int	ft_strichr(const char *str, int c)$/;"	f
ft_striteri	libft/str/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/str/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/str/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/str/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/str/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/str/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/str/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	libft/mem/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t size)$/;"	f
ft_strnstr	libft/str/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *to_found, size_t n)$/;"	f
ft_strrchr	libft/str/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f
ft_strsplit	libft/str/ft_strsplit.c	/^char	**ft_strsplit(char const *s, char c)$/;"	f
ft_strsub	libft/str/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/str/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/str/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_swaptopa	srcs/stackA.c	/^void	ft_swaptopa(t_pile **stack)$/;"	f
ft_swaptopb	srcs/stackB.c	/^void	ft_swaptopb(t_pile **stack)$/;"	f
ft_tolower	libft/str/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/str/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_transfere	srcs/utils.c	/^void	ft_transfere(t_swap *env)$/;"	f
index	includes/push_swap.h	/^	int				index;$/;"	m	struct:s_pile
input	includes/push_swap.h	/^	int		*input;$/;"	m	struct:s_swap
len	includes/push_swap.h	/^	int		len;$/;"	m	struct:s_swap
main	srcs/main.c	/^int	main(int argc, char **argv)$/;"	f
max	includes/push_swap.h	/^	int		max;$/;"	m	struct:s_swap
min	includes/push_swap.h	/^	int		min;$/;"	m	struct:s_swap
next	includes/push_swap.h	/^	struct s_pile	*next;$/;"	m	struct:s_pile	typeref:struct:s_pile::s_pile
next	libft/include/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
output	includes/push_swap.h	/^	int		*output;$/;"	m	struct:s_swap
pa	includes/push_swap.h	/^	t_pile	*pa;$/;"	m	struct:s_swap
pb	includes/push_swap.h	/^	t_pile	*pb;$/;"	m	struct:s_swap
prefix	includes/push_swap.h	/^	int		*prefix;$/;"	m	struct:s_swap
s_list	libft/include/libft.h	/^typedef struct s_list$/;"	s
s_pile	includes/push_swap.h	/^typedef struct s_pile$/;"	s
s_swap	includes/push_swap.h	/^typedef struct s_swap$/;"	s
split_len	libft/str/ft_split.c	/^static int	split_len(const char *str, char c)$/;"	f	file:
sum	includes/push_swap.h	/^	int		*sum;$/;"	m	struct:s_swap
t_list	libft/include/libft.h	/^}			t_list;$/;"	t	typeref:struct:s_list
t_max	includes/push_swap.h	/^	int		t_max;$/;"	m	struct:s_swap
t_min	includes/push_swap.h	/^	int		t_min;$/;"	m	struct:s_swap
t_pile	includes/push_swap.h	/^}		t_pile;$/;"	t	typeref:struct:s_pile
t_swap	includes/push_swap.h	/^}		t_swap;$/;"	t	typeref:struct:s_swap
tmp_max	includes/push_swap.h	/^	int		*tmp_max;$/;"	m	struct:s_swap
tmp_min	includes/push_swap.h	/^	int		*tmp_min;$/;"	m	struct:s_swap
