!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC 		= 	gcc$/;"	m
CCEND	Makefile	/^CCEND 		=   	\\033[0m$/;"	m
CCPURPLE	Makefile	/^CCPURPLE 	=   	\\033[35m$/;"	m
CCRED	Makefile	/^CCRED 		=   	\\033[31m$/;"	m
CCYAN	Makefile	/^CCYAN 		=   	\\033[34m$/;"	m
CGREEN	Makefile	/^CGREEN		=   	\\033[33m$/;"	m
CONV	Makefile	/^CONV 		=     	ft_atoi.c			\\$/;"	m
CONV_O	Makefile	/^CONV_O		=	$(addprefix $(PATH_CONV), $(CONV))$/;"	m
EXEC	Makefile	/^EXEC 		= 	libft$/;"	m
FLAGS	Makefile	/^FLAGS 		= 	-Wall -Werror -Wextra$/;"	m
HEADER	Makefile	/^HEADER 		= 	include\/libft.h$/;"	m
ISA	Makefile	/^ISA		=	ft_isalnum.c	   		\\$/;"	m
ISA_O	Makefile	/^ISA_O		=	$(addprefix $(PATH_ISA), $(ISA))$/;"	m
LIBFT_H	include/libft.h	/^# define LIBFT_H$/;"	d
LST	Makefile	/^LST	=		ft_lstadd_back.c 		\\$/;"	m
LST_O	Makefile	/^LST_O		=	$(addprefix $(PATH_LST), $(LST))$/;"	m
MEM	Makefile	/^MEM		=	ft_bzero.c	   		\\$/;"	m
MEM_O	Makefile	/^MEM_O		=	$(addprefix $(PATH_MEM), $(MEM))$/;"	m
MK	Makefile	/^MK 		= 	Makefile$/;"	m
NAME	Makefile	/^NAME 		=	libft.a$/;"	m
OBJS_CONV	Makefile	/^OBJS_CONV	=	$(CONV:.c=.o)$/;"	m
OBJS_ISA	Makefile	/^OBJS_ISA	=	$(ISA:.c=.o)$/;"	m
OBJS_LST	Makefile	/^OBJS_LST	=	$(LST:.c=.o)$/;"	m
OBJS_MEM	Makefile	/^OBJS_MEM	=	$(MEM:.c=.o)$/;"	m
OBJS_PRINT	Makefile	/^OBJS_PRINT	=	$(PRINT:.c=.o)$/;"	m
OBJS_STR	Makefile	/^OBJS_STR	=	$(STR:.c=.o)$/;"	m
OBJ_C	Makefile	/^OBJ_C		=	$(addprefix $(PATH_OBJ), $(OBJS_CONV))$/;"	m
OBJ_ISA	Makefile	/^OBJ_ISA		=	$(addprefix $(PATH_OBJ), $(OBJS_ISA))$/;"	m
OBJ_LST	Makefile	/^OBJ_LST		=	$(addprefix $(PATH_OBJ), $(OBJS_LST))$/;"	m
OBJ_MEM	Makefile	/^OBJ_MEM		=	$(addprefix $(PATH_OBJ), $(OBJS_MEM))$/;"	m
OBJ_PRINT	Makefile	/^OBJ_PRINT	=	$(addprefix $(PATH_OBJ), $(OBJS_PRINT))$/;"	m
OBJ_STR	Makefile	/^OBJ_STR		=	$(addprefix $(PATH_OBJ), $(OBJS_STR))$/;"	m
PATH_CONV	Makefile	/^PATH_CONV	=	.\/conv\/$/;"	m
PATH_ISA	Makefile	/^PATH_ISA	=	.\/isa\/$/;"	m
PATH_LST	Makefile	/^PATH_LST	=	.\/lst\/$/;"	m
PATH_MEM	Makefile	/^PATH_MEM	=	.\/mem\/$/;"	m
PATH_OBJ	Makefile	/^PATH_OBJ	=	.\/objs\/$/;"	m
PATH_PRINT	Makefile	/^PATH_PRINT	=	.\/print\/$/;"	m
PATH_STR	Makefile	/^PATH_STR	=	.\/str\/$/;"	m
PRINT	Makefile	/^PRINT		=	ft_putchar_fd.c  	        \\$/;"	m
PRINT_O	Makefile	/^PRINT_O		=	$(addprefix $(PATH_PRINT), $(PRINT))$/;"	m
STR	Makefile	/^STR		=	ft_split.c       		\\$/;"	m
STR_O	Makefile	/^STR_O		=	$(addprefix $(PATH_STR), $(STR))$/;"	m
content	include/libft.h	/^	void			*content;$/;"	m	struct:s_list
ft_atoi	conv/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_base	conv/ft_atoi_base.c	/^int	ft_atoi_base(char *str, char *base)$/;"	f
ft_atoll	conv/ft_atoll.c	/^int	ft_atoll(const char *str)$/;"	f
ft_binary_len	conv/ft_binary_len.c	/^int	ft_binary_len(int nbr)$/;"	f
ft_bzero	mem/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	mem/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check_base	conv/ft_atoi_base.c	/^int	ft_check_base(int len_base, char *base)$/;"	f
ft_check_end	conv/ft_atoi_base.c	/^int	ft_check_end(char c, char *base)$/;"	f
ft_complet	conv/ft_itoa.c	/^static char	*ft_complet(char *str, long long int n, int len)$/;"	f	file:
ft_count_word	str/ft_strsplit.c	/^static int	ft_count_word(char *s, char c)$/;"	f	file:
ft_dec_to_bin	conv/ft_dec_to_bin.c	/^int	*ft_dec_to_bin(int nbr, int size)$/;"	f
ft_freetab	mem/ft_freetab.c	/^void	ft_freetab(char **tab)$/;"	f
ft_get_nb	conv/ft_atoi_base.c	/^int	ft_get_nb(char c, char *base)$/;"	f
ft_isalnum	isa/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	isa/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	isa/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	isa/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	isa/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	conv/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_joint	str/ft_strjoin.c	/^char	*ft_joint(char *dest, char const *s2, unsigned int i, char *tmp)$/;"	f
ft_len_str	conv/ft_itoa.c	/^static int	ft_len_str(long long int n)$/;"	f	file:
ft_len_tab	str/ft_len_tab.c	/^int	ft_len_tab(char **tab)$/;"	f
ft_lstadd_back	lst/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *ne)$/;"	f
ft_lstadd_front	lst/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *ne)$/;"	f
ft_lstclear	lst/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	lst/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	lst/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	lst/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstnew	lst/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	lst/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memalloc	mem/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memchr	mem/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	mem/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	mem/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	mem/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	mem/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_putchar	print/ft_putchar.c	/^int	ft_putchar(int c)$/;"	f
ft_putchar_fd	print/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	print/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	print/ft_putnbr.c	/^int	ft_putnbr(int n)$/;"	f
ft_putnbr_base	print/ft_putnbr_base.c	/^int	ft_putnbr_base(int nbr, char *base, int res)$/;"	f
ft_putnbr_fd	print/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_unbase	print/ft_putnbr_unbase.c	/^int	ft_putnbr_unbase(unsigned int nbr, char *base, int res)$/;"	f
ft_putnbr_unsigned	print/ft_putnbr_unsigned.c	/^int	ft_putnbr_unsigned(unsigned int n)$/;"	f
ft_putstr	print/ft_putstr.c	/^int	ft_putstr(char *str)$/;"	f
ft_putstr_fd	print/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_sort_int_tab	print/ft_putnbr_base.c	/^static int	ft_sort_int_tab(char *str)$/;"	f	file:
ft_sort_int_tab	print/ft_putnbr_unbase.c	/^static int	ft_sort_int_tab(char *str)$/;"	f	file:
ft_split	str/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_splitstr	str/ft_strsplit.c	/^static int	ft_splitstr(char **tab, char *s, char c, size_t len)$/;"	f	file:
ft_start_str	conv/ft_atoi_base.c	/^char	*ft_start_str(char *str, int *sign)$/;"	f
ft_strchr	str/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strcpy	str/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	mem/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdupcat	mem/ft_strdupcat.c	/^char	*ft_strdupcat(char *dest, const char *src)$/;"	f
ft_striteri	str/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	str/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	str/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	str/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	str/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	str/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	str/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	str/ft_split.c	/^static char	*ft_strndup(const char *s, size_t size)$/;"	f	file:
ft_strnstr	str/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *to_found, size_t n)$/;"	f
ft_strrchr	str/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f
ft_strsplit	str/ft_strsplit.c	/^char	**ft_strsplit(char const *s, char c)$/;"	f
ft_strsub	str/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	str/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	str/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	str/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	str/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
next	include/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
s_list	include/libft.h	/^typedef struct s_list$/;"	s
split_len	str/ft_split.c	/^static int	split_len(const char *str, char c)$/;"	f	file:
t_list	include/libft.h	/^}			t_list;$/;"	t	typeref:struct:s_list
