!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
A	includes/fdf_define.h	/^# define A /;"	d
BUFFER_SIZE	Gnl/includes/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
BUFFER_SIZE	Gnl/includes/get_next_line_bonus.h	/^#  define BUFFER_SIZE /;"	d
C	includes/fdf_define.h	/^# define C /;"	d
CC	Gnl/Makefile	/^CC = 	 gcc$/;"	m
CC	Makefile	/^CC = 	 gcc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CUBE	includes/fdf_define.h	/^# define CUBE /;"	d
D	includes/fdf_define.h	/^# define D /;"	d
DOWN	includes/fdf_define.h	/^# define DOWN /;"	d
ERR_DATA_FILTER	minilibx/mlx_png.c	/^#define	ERR_DATA_FILTER	/;"	d	file:
ERR_DATA_MISMATCH	minilibx/mlx_png.c	/^#define	ERR_DATA_MISMATCH	/;"	d	file:
ERR_MAGIC_SIZE	minilibx/mlx_png.c	/^#define	ERR_MAGIC_SIZE	/;"	d	file:
ERR_MAGIC_WRONG	minilibx/mlx_png.c	/^#define	ERR_MAGIC_WRONG	/;"	d	file:
ERR_STRUCT_CRC	minilibx/mlx_png.c	/^#define	ERR_STRUCT_CRC	/;"	d	file:
ERR_STRUCT_DAT	minilibx/mlx_png.c	/^#define	ERR_STRUCT_DAT	/;"	d	file:
ERR_STRUCT_END	minilibx/mlx_png.c	/^#define	ERR_STRUCT_END	/;"	d	file:
ERR_STRUCT_HDR	minilibx/mlx_png.c	/^#define	ERR_STRUCT_HDR	/;"	d	file:
ERR_STRUCT_INCIMPL	minilibx/mlx_png.c	/^#define	ERR_STRUCT_INCIMPL /;"	d	file:
ERR_STRUCT_INCOMPLETE	minilibx/mlx_png.c	/^#define	ERR_STRUCT_INCOMPLETE	/;"	d	file:
ERR_STRUCT_MISSCHK	minilibx/mlx_png.c	/^#define	ERR_STRUCT_MISSCHK	/;"	d	file:
ERR_ZLIB	minilibx/mlx_png.c	/^#define	ERR_ZLIB	/;"	d	file:
ESC	includes/fdf_define.h	/^# define ESC /;"	d
EXEC	Makefile	/^EXEC = 	 fdf$/;"	m
FDF_DEFINE_H	includes/fdf_define.h	/^# define FDF_DEFINE_H$/;"	d
FDF_H	includes/fdf.h	/^# define FDF_H$/;"	d
FDF_STRUCT_H	includes/fdf_struct.h	/^# define FDF_STRUCT_H$/;"	d
FILESO	libft/Makefile	/^FILESO = $(SRC:.c=.o)$/;"	m
FLAGS	Gnl/Makefile	/^FLAGS = -Wall -Werror -Wextra$/;"	m
FLAGS	Makefile	/^FLAGS = -Wall -Werror -Wextra -ggdb -O3 $/;"	m
FLAGS	libft/Makefile	/^FLAGS = -Wall -Werror -Wextra$/;"	m
FONT_HEIGHT	minilibx/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	minilibx/mlx_int.h	/^#define FONT_WIDTH	/;"	d
GET_NEXT_LINE_BONUS_H	Gnl/includes/get_next_line_bonus.h	/^# define GET_NEXT_LINE_BONUS_H$/;"	d
GET_NEXT_LINE_H	Gnl/includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
HEADER	Gnl/Makefile	/^HEADER = includes\/get_next_line.h$/;"	m
HEADER	Makefile	/^HEADER = includes\/fdf.h\\$/;"	m
HEADER	libft/Makefile	/^HEADER = libft.h$/;"	m
ISO	includes/fdf_define.h	/^# define ISO /;"	d
LEFT	includes/fdf_define.h	/^# define LEFT /;"	d
LIB	Makefile	/^LIB= -lGnl -llibft$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
M	includes/fdf_define.h	/^# define M /;"	d
MAX_EVENT	minilibx/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	minilibx/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MLX	Makefile	/^MLX = -Lminilibx -lmlx -framework OpenGL -framework AppKit$/;"	m
MLX_H	minilibx/mlx.h	/^#define	MLX_H$/;"	d
MULT	includes/fdf_define.h	/^# define MULT /;"	d
NAME	Gnl/Makefile	/^NAME = 	 gnl.a$/;"	m
NAME	Makefile	/^NAME = 	 fdf.a$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NOM	minilibx/Makefile	/^NOM=libmlx.a$/;"	m
OBJ	minilibx/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	minilibx/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJS	Gnl/Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
OBJS	Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
PNG_HDR_SIZE	minilibx/mlx_png.c	/^#define PNG_HDR_SIZE	/;"	d	file:
PNG_MAGIC_SIZE	minilibx/mlx_png.c	/^#define	PNG_MAGIC_SIZE	/;"	d	file:
PROJECT	includes/fdf_define.h	/^# define PROJECT /;"	d
R	includes/fdf_define.h	/^# define R /;"	d
RETURN	minilibx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RIGHT	includes/fdf_define.h	/^# define RIGHT /;"	d
S	includes/fdf_define.h	/^# define S /;"	d
SAN	Makefile	/^SAN = -fsanitize=address$/;"	m
SRC	Gnl/Makefile	/^SRC =    srcs\/get_next_line.c\\$/;"	m
SRC	Makefile	/^SRC =    srcs\/ft_fdf.c			\\$/;"	m
SRC	libft/Makefile	/^SRC =     ft_atoi.c	   \\$/;"	m
SRC	minilibx/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
UNIQ_BPP	minilibx/mlx_int.h	/^#define UNIQ_BPP	/;"	d
UNZOOM	includes/fdf_define.h	/^# define UNZOOM /;"	d
UP	includes/fdf_define.h	/^# define UP /;"	d
W	includes/fdf_define.h	/^# define W /;"	d
ZOOM	includes/fdf_define.h	/^# define ZOOM /;"	d
Z_CHUNK	minilibx/mlx_png.c	/^#define	Z_CHUNK	/;"	d	file:
angle	includes/fdf_struct.h	/^	float	angle;$/;"	m	struct:s_mov
appid	minilibx/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
b_x	includes/fdf_struct.h	/^	float	b_x;$/;"	m	struct:s_point
b_x1	includes/fdf_struct.h	/^	float	b_x1;$/;"	m	struct:s_point
b_y	includes/fdf_struct.h	/^	float	b_y;$/;"	m	struct:s_point
b_y1	includes/fdf_struct.h	/^	float	b_y1;$/;"	m	struct:s_point
bpp	minilibx/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	file:
buffer	minilibx/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	minilibx/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon1	file:
coef	includes/fdf_struct.h	/^	float	coef;$/;"	m	struct:s_color
col	minilibx/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	includes/fdf_struct.h	/^	int		color;$/;"	m	struct:s_env
color	minilibx/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	file:
color	minilibx/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
color_on	includes/fdf_struct.h	/^	int		color_on;$/;"	m	struct:s_env
colors	includes/fdf_struct.h	/^	t_color	colors;$/;"	m	struct:s_env
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
crc_table	minilibx/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d };$/;"	v
deal_key	srcs/ft_event.c	/^int	deal_key(int key, t_env *fdf)$/;"	f
depth	minilibx/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	file:
dhigh	includes/fdf_struct.h	/^	int	dhigh;$/;"	m	struct:s_map
display_log	minilibx/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
end	includes/fdf_struct.h	/^	int		end;$/;"	m	struct:s_color
font	minilibx/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	minilibx/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon1	file:
font_fshader	minilibx/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	minilibx/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	minilibx/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_base	libft/ft_atoi_base.c	/^int	ft_atoi_base(char *str, char *base)$/;"	f
ft_backgroud	srcs/ft_put_string_mlx.c	/^void	ft_backgroud(t_env *fdf, int x, int y)$/;"	f
ft_bresenham	srcs/ft_bresenham.c	/^void	ft_bresenham(t_env *fdf, float x1, float y1)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check_base	libft/ft_atoi_base.c	/^int	ft_check_base(int len_base, char *base)$/;"	f
ft_check_end	libft/ft_atoi_base.c	/^int	ft_check_end(char c, char *base)$/;"	f
ft_color_on	srcs/ft_event_utils.c	/^int	ft_color_on(t_env *fdf, int key)$/;"	f
ft_complet	libft/ft_itoa.c	/^static char	*ft_complet(char *str, long long int n, int len)$/;"	f	file:
ft_complet_map	srcs/ft_create_map.c	/^int	ft_complet_map(int fd, t_env *fdf)$/;"	f
ft_count	srcs/ft_create_map_utils.c	/^int	ft_count(char *argv, t_env *fdf)$/;"	f
ft_count_sep	srcs/ft_create_map_utils.c	/^int	ft_count_sep(char *line, int c)$/;"	f
ft_count_words	libft/ft_strsplit.c	/^static	int	ft_count_words(const char *str, char c)$/;"	f	file:
ft_count_words_sep	libft/ft_count_words_sep.c	/^int	ft_count_words_sep(char const *s, char c)$/;"	f
ft_create_map	srcs/ft_create_map.c	/^int	ft_create_map(char *argv, t_env *fdf)$/;"	f
ft_draw_mlx_print	srcs/ft_draw.c	/^void	ft_draw_mlx_print(t_env *fdf, int x, int y)$/;"	f
ft_escape	srcs/ft_event_utils.c	/^int	ft_escape(t_env *fdf, int key)$/;"	f
ft_fdf	srcs/ft_fdf.c	/^int	ft_fdf(char *argv)$/;"	f
ft_free	Gnl/srcs/get_next_line.c	/^void	ft_free(char *ptr)$/;"	f
ft_free	Gnl/srcs/get_next_line_bonus.c	/^void	ft_free(char *ptr)$/;"	f
ft_free_map	srcs/ft_free.c	/^int	ft_free_map(t_env *fdf)$/;"	f
ft_get_line	Gnl/srcs/get_next_line.c	/^char	*ft_get_line(char **line, char **s_buff)$/;"	f
ft_get_line	Gnl/srcs/get_next_line_bonus.c	/^char	*ft_get_line(char **line, char **s_buff)$/;"	f
ft_get_name	srcs/ft_mlx.c	/^void	ft_get_name(t_env *fdf, char *argv)$/;"	f
ft_get_nb	libft/ft_atoi_base.c	/^int	ft_get_nb(char c, char *base)$/;"	f
ft_hight	srcs/ft_event.c	/^int	ft_hight(t_env *fdf, int key)$/;"	f
ft_init	srcs/ft_init.c	/^void	ft_init(t_env *fdf)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_iso	srcs/ft_calcul.c	/^void	ft_iso(t_env *fdf, float *x, float *y, int z)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_joint	libft/ft_strjoin.c	/^char	*ft_joint(char *dest, char const *s2, unsigned int i, char *tmp)$/;"	f
ft_len_str	libft/ft_itoa.c	/^static int	ft_len_str(long long int n)$/;"	f	file:
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *ne)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *ne)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_max	libft/ft_max.c	/^int	ft_max(int *tab, unsigned int len)$/;"	f
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_menu	srcs/ft_put_string_mlx.c	/^void	ft_menu(t_env *fdf)$/;"	f
ft_mlx	srcs/ft_mlx.c	/^int	ft_mlx(t_env *fdf, char *argv)$/;"	f
ft_move	srcs/ft_bresenham.c	/^void	ft_move(t_env *fdf)$/;"	f
ft_move_view	srcs/ft_event_utils.c	/^void	ft_move_view(t_env *fdf, int key)$/;"	f
ft_open_menu	srcs/ft_event.c	/^int	ft_open_menu(t_env *fdf, int key)$/;"	f
ft_projection	srcs/ft_event_utils.c	/^int	ft_projection(t_env *fdf, int key)$/;"	f
ft_put_pixel	srcs/ft_bresenham.c	/^void	ft_put_pixel(t_env *fdf)$/;"	f
ft_put_string_mlx	srcs/ft_put_string_mlx.c	/^void	ft_put_string_mlx(t_env *fdf)$/;"	f
ft_putchar	libft/ft_putchar.c	/^int	ft_putchar(int c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^int	ft_putnbr(int n)$/;"	f
ft_putnbr_base	libft/ft_putnbr_base.c	/^int	ft_putnbr_base(int nbr, char *base, int res)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_unbase	libft/ft_putnbr_unbase.c	/^int	ft_putnbr_unbase(unsigned int nbr, char *base, int res)$/;"	f
ft_putnbr_unsigned	libft/ft_putnbr_unsigned.c	/^int	ft_putnbr_unsigned(unsigned int n)$/;"	f
ft_putstr	libft/ft_putstr.c	/^int	ft_putstr(char *str)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_read	Gnl/srcs/get_next_line.c	/^int	ft_read(int fd, char **buf, char **s_buff, char **line)$/;"	f
ft_read	Gnl/srcs/get_next_line_bonus.c	/^int	ft_read(int fd, char **buf, char **s_buff, char **line)$/;"	f
ft_reload	srcs/ft_mlx.c	/^int	ft_reload(t_env *fdf)$/;"	f
ft_rotate	srcs/ft_event.c	/^int	ft_rotate(t_env *fdf, int key)$/;"	f
ft_set	srcs/ft_bresenham.c	/^void	ft_set(t_env *fdf)$/;"	f
ft_set_gradiant	srcs/ft_colors.c	/^void	ft_set_gradiant(t_env *fdf)$/;"	f
ft_setmax	srcs/ft_create_map.c	/^static void	ft_setmax(t_env *fdf)$/;"	f	file:
ft_sort_int_tab	libft/ft_putnbr_base.c	/^static int	ft_sort_int_tab(char *str)$/;"	f	file:
ft_sort_int_tab	libft/ft_putnbr_unbase.c	/^static int	ft_sort_int_tab(char *str)$/;"	f	file:
ft_space	srcs/ft_init.c	/^void	ft_space(t_env *fdf)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_split_line	srcs/ft_create_map.c	/^static void	ft_split_line(t_env *fdf, char **split_line)$/;"	f	file:
ft_start_str	libft/ft_atoi_base.c	/^char	*ft_start_str(char *str, int *sign)$/;"	f
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *dest, char *s1)$/;"	f
ft_strchr	Gnl/srcs/get_next_line_utils.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	Gnl/srcs/get_next_line_utils_bonus.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	Gnl/srcs/get_next_line_utils.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	Gnl/srcs/get_next_line_utils_bonus.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	Gnl/srcs/get_next_line_utils.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	Gnl/srcs/get_next_line_utils_bonus.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	Gnl/srcs/get_next_line_utils.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	Gnl/srcs/get_next_line_utils_bonus.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strlen_sep	libft/ft_strlen_sep.c	/^size_t	ft_strlen_sep(char const *s, char c)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	libft/ft_split.c	/^static char	*ft_strndup(const char *s, size_t size)$/;"	f	file:
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *to_found, size_t n)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f
ft_strsplit	libft/ft_strsplit.c	/^char	**ft_strsplit(const char *str, char c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	Gnl/srcs/get_next_line_utils.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr	Gnl/srcs/get_next_line_utils_bonus.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr	libft/ft_strsub.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tabnew_two	srcs/ft_new_tab_two.c	/^int	**ft_tabnew_two(size_t x, size_t y)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_window	srcs/ft_init.c	/^void	ft_window(t_env *fdf)$/;"	f
ft_word	libft/ft_strsplit.c	/^static	char	*ft_word(const char *str, char c, int *i)$/;"	f	file:
ft_zoom	srcs/ft_event_utils.c	/^int	ft_zoom(t_env *fdf, int key)$/;"	f
func_t	minilibx/mlx_int.h	/^typedef int (*func_t)();$/;"	t
get_next_line	Gnl/srcs/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_next_line	Gnl/srcs/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f
glsl_info_s	minilibx/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	minilibx/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
height	minilibx/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon1	file:
height	minilibx/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
height	minilibx/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	file:
high	includes/fdf_struct.h	/^	int	high;$/;"	m	struct:s_map
i	includes/fdf_struct.h	/^	int		i;$/;"	m	struct:s_env
image_fshader	minilibx/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	minilibx/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	minilibx/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	minilibx/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	minilibx/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	minilibx/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
interlace	minilibx/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	file:
j	includes/fdf_struct.h	/^	int		j;$/;"	m	struct:s_env
loc_font_atlassize	minilibx/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	minilibx/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	minilibx/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	minilibx/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	minilibx/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	minilibx/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	minilibx/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	minilibx/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	minilibx/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	minilibx/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	minilibx/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	minilibx/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	minilibx/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	minilibx/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	minilibx/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
loop_hook	minilibx/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	minilibx/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	minilibx/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
magic	minilibx/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
main	srcs/main.c	/^int	main(int argc, char **argv)$/;"	f
main_loop_active	minilibx/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
map	includes/fdf_struct.h	/^	int	**map;$/;"	m	struct:s_map
map	includes/fdf_struct.h	/^	t_map	map;$/;"	m	struct:s_env
max	includes/fdf_struct.h	/^	int		max;$/;"	m	struct:s_point
max	includes/fdf_struct.h	/^	int	max;$/;"	m	struct:s_map
max	srcs/ft_calcul.c	/^float	max(float a, float b)$/;"	f
menu	includes/fdf_struct.h	/^	int		menu;$/;"	m	struct:s_env
mipng_crc	minilibx/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f
mipng_data	minilibx/mlx_png.c	/^int	mipng_data(mlx_img_list_t *img, unsigned char *dat, png_info_t *pi)$/;"	f
mipng_defilter	minilibx/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v
mipng_defilter_average	minilibx/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_none	minilibx/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_paeth	minilibx/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_sub	minilibx/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_up	minilibx/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_err	minilibx/mlx_png.c	/^char *(mipng_err[]) =$/;"	v
mipng_fill_img	minilibx/mlx_png.c	/^int	mipng_fill_img(mlx_img_list_t *img, unsigned char *buf, png_info_t *pi)$/;"	f
mipng_is_type	minilibx/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f
mipng_magic	minilibx/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f
mipng_structure	minilibx/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f
mipng_verif_hdr	minilibx/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f
mlx_col_name	minilibx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	minilibx/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	minilibx/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	minilibx/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	minilibx/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	minilibx/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	minilibx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	minilibx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	minilibx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_png	minilibx/mlx_png.c	/^mlx_img_list_t	*mlx_int_parse_png(mlx_ptr_t *xvar, unsigned char *fptr, int size)$/;"	f
mlx_int_parse_xpm	minilibx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	minilibx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	minilibx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	minilibx/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_png_file_to_image	minilibx/mlx_png.c	/^void	*mlx_png_file_to_image(mlx_ptr_t *xvar, char *file, int *width, int *height)$/;"	f
mlx_ptr	includes/fdf_struct.h	/^	void	*mlx_ptr;$/;"	m	struct:s_env
mlx_ptr_s	minilibx/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	minilibx/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	minilibx/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	minilibx/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	minilibx/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	minilibx/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	minilibx/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	minilibx/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	minilibx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
mod	srcs/ft_calcul.c	/^float	mod(float a)$/;"	f
mov	includes/fdf_struct.h	/^	t_mov	mov;$/;"	m	struct:s_env
name	includes/fdf_struct.h	/^	char	*name;$/;"	m	struct:s_env
name	minilibx/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	minilibx/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	minilibx/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
nbcol	includes/fdf_struct.h	/^	int	nbcol;$/;"	m	struct:s_map
nblin	includes/fdf_struct.h	/^	int	nblin;$/;"	m	struct:s_map
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minilibx/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	minilibx/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	minilibx/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
p	includes/fdf_struct.h	/^	t_point	p;$/;"	m	struct:s_env
pad	includes/fdf_struct.h	/^	int	pad;$/;"	m	struct:s_map
pixel_data	minilibx/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon1	file:
pixel_fshader	minilibx/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	minilibx/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	minilibx/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	minilibx/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
png_info_s	minilibx/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_t	minilibx/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
pos	includes/fdf_struct.h	/^	int		pos;$/;"	m	struct:s_point
posx	includes/fdf_struct.h	/^	int	posx;$/;"	m	struct:s_map
posy	includes/fdf_struct.h	/^	int	posy;$/;"	m	struct:s_map
proj	includes/fdf_struct.h	/^	int		proj;$/;"	m	struct:s_env
s_col_name	minilibx/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_color	includes/fdf_struct.h	/^typedef struct s_color$/;"	s
s_env	includes/fdf_struct.h	/^typedef struct s_env$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_map	includes/fdf_struct.h	/^typedef struct s_map$/;"	s
s_mov	includes/fdf_struct.h	/^typedef struct s_mov$/;"	s
s_point	includes/fdf_struct.h	/^typedef struct s_point$/;"	s
s_x	includes/fdf_struct.h	/^	double	s_x;$/;"	m	struct:s_mov
s_xpm_col	minilibx/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
s_y	includes/fdf_struct.h	/^	double	s_y;$/;"	m	struct:s_mov
spc	includes/fdf_struct.h	/^	int		spc;$/;"	m	struct:s_point
split_len	libft/ft_split.c	/^static int	split_len(const char *str, char c)$/;"	f	file:
start	includes/fdf_struct.h	/^	int		start;$/;"	m	struct:s_color
t_color	includes/fdf_struct.h	/^}		t_color;$/;"	t	typeref:struct:s_color
t_env	includes/fdf_struct.h	/^}		t_env;$/;"	t	typeref:struct:s_env
t_list	libft/libft.h	/^}			t_list;$/;"	t	typeref:struct:s_list
t_map	includes/fdf_struct.h	/^}		t_map;$/;"	t	typeref:struct:s_map
t_mov	includes/fdf_struct.h	/^}		t_mov;$/;"	t	typeref:struct:s_mov
t_point	includes/fdf_struct.h	/^}		t_point;$/;"	t	typeref:struct:s_point
t_xpm_col	minilibx/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
texture	minilibx/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
up	includes/fdf_struct.h	/^	int		up;$/;"	m	struct:s_mov
vbuffer	minilibx/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vertexes	minilibx/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
width	minilibx/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon1	file:
width	minilibx/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
width	minilibx/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	file:
win_length	includes/fdf_struct.h	/^	int		win_length;$/;"	m	struct:s_env
win_list	minilibx/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
win_ptr	includes/fdf_struct.h	/^	void	*win_ptr;$/;"	m	struct:s_env
win_width	includes/fdf_struct.h	/^	int		win_width;$/;"	m	struct:s_env
winid	minilibx/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
x	includes/fdf_struct.h	/^	double	x;$/;"	m	struct:s_mov
x	includes/fdf_struct.h	/^	int		x;$/;"	m	struct:s_point
x	includes/fdf_struct.h	/^	int	x;$/;"	m	struct:s_map
x_step	includes/fdf_struct.h	/^	float	x_step;$/;"	m	struct:s_point
y	includes/fdf_struct.h	/^	double	y;$/;"	m	struct:s_mov
y	includes/fdf_struct.h	/^	int		y;$/;"	m	struct:s_point
y	includes/fdf_struct.h	/^	int	y;$/;"	m	struct:s_map
y_step	includes/fdf_struct.h	/^	float	y_step;$/;"	m	struct:s_point
z	includes/fdf_struct.h	/^	int		z;$/;"	m	struct:s_point
z1	includes/fdf_struct.h	/^	int		z1;$/;"	m	struct:s_point
zoom	includes/fdf_struct.h	/^	int		zoom;$/;"	m	struct:s_point
